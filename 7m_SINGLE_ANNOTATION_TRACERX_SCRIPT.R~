library(xlsx)
library(deepSNV)

source('/camp/lab/swantonc/working/albakim/MousePipeline/createSCALPELcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createEXPORTscalpelcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createMUTECTcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createVARSCANcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createPROCESSSOMATICcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createREADCOUNTcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createFPFILTERcommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createVCFforvarscancommand.R')
source('/camp/lab/swantonc/working/albakim/MousePipeline/createSNPfilecommand.R')


##Debbie
pathtosamfiles <- "/camp/lab/swantonc/working/naganoa/EgfrMouse/output/DN19306_2/"
mousedatapath <- "/camp/lab/swantonc/working/naganoa/EgfrMouse/output/DN19306_2/Debbie_WES_info.xlsx"
mousedata <- read.xlsx(mousedatapath, sheetIndex = 1, stringsAsFactors=FALSE)
tmp.dir <- "/camp/lab/swantonc/working/naganoa/EgfrMouse/output/DN19306_2/tmp/"

filt.p.val.thresh <- 	0.01
filt.min.alt.reads<-  3
filt.max.VAF<- 	3
filt.min.VAF<- 	1
filt.use.VarScan<- 	TRUE
filt.germline.max.reads<- 	1
filt.germline.max.vaf<- 	1
filt.use.SNV<- 	TRUE
filt.min.depth<- 	10
filt.BlackListed<- 	FALSE #variant allowed to be in blacklised region?
filt.use.Mutect	<- TRUE
filt.use.VarScan.low<- 	TRUE
filt.indel.p.val.thresh<- 	0.001
filt.indel.min.alt.reads<- 	5
filt.indel.max.VAF<- 	3
filt.indel.min.VAF<- 	1
filt.indel.use.VarScan<- 	TRUE
filt.indel.germline.max.reads<- 	1
filt.indel.germline.max.vaf<- 	1
filt.indel.use.SNV<- 	FALSE
filt.indel.use.dinuc<- 	FALSE
filt.indel.min.depth<- 	10
filt.indel.BlackListed<- 	FALSE
filt.indel.use.Scalpel <- TRUE



## specify mice
mice <- as.character(unique(mousedata$Mouse.Name))
overwrite <- F
mapq <- 20
baseq <- 20
bamreadcount.exe <- "bam-readcount"

mouserefpath <- "/camp/lab/swantonc/working/albakim/MouseImmunoediting/mm10/mm10.fa"
dbsnp <- "/camp/lab/swantonc/working/albakim/MouseImmunoediting/S0276129/mgp.v4.snps.dbSNP_chr.vcf"
blacklist.path <- "/camp/lab/swantonc/working/albakim/MouseImmunoediting/AnnotationFiles/mm10.blacklist.bed"
annovar.path <- '/camp/lab/swantonc/working/albakim/MouseImmunoediting/Annovar/table_annovar.pl'
annovar.params <- "-remove -buildver mm10 -protocol refGene,cytoBand,genomicSuperDups,bed,snp142 -operation g,r,r,r,f -bedfile mm10_blacklisted.bed /camp/lab/swantonc/working/albakim/MouseImmunoediting/Annovar/mm10db/ -nastring NA"


#for(i in 2:length(mice)){
i=1
        m <- mice[i]
        print(m)
        
        ##if the "SNV" folder is not created - to make
        SNVdir <- paste0(pathtosamfiles, m, "/SNV")
        if(!dir.exists(SNVdir)){
                dir.create(SNVdir, mode = "0775")
        }
       
	##if the "tmp" folder is not created - to make
	if(!dir.exists(tmp.dir)){
                dir.create(tmp.dir, mode = "0775")
        } 

        ## define mouse GL and tumour regions
        GL <- list.files(paste0(pathtosamfiles, m), full.names = F, pattern = "ail")
        GL <- GL[grepl(".bam$", GL)]
        GL <- gsub("_processed.bam", "", GL)
        tumour.regions <- list.files(paste0(pathtosamfiles, m), full.names = F, pattern = ".bam$")
        tumour.regions <- tumour.regions[!grepl(GL, tumour.regions)]
        tumour.regions <- gsub("_processed.bam", "", tumour.regions)
        all.regions <- c(GL, tumour.regions)
        
        ## check that variant files exist
        varFiles       <- c(paste(pathtosamfiles, m, "/VARSCAN/", tumour.regions, "vs", GL, "/", tumour.regions, "vs", GL, ".snp.Somatic.fpfilter.output.VAF0.05",sep=''),
                            paste(pathtosamfiles, m, "/VARSCAN/", tumour.regions, "vs", GL, "/", tumour.regions, "vs", GL, ".indel.Somatic.hc",sep=''),
                            paste(pathtosamfiles, m, "/MUTECT/", tumour.regions, "vs", GL, "/", tumour.regions, "vs", GL,"_mutect.vcf",sep=''),
                            paste(pathtosamfiles, m, "/SCALPEL/", tumour.regions, "vs", GL, "/", tumour.regions, "vs", GL,"_scalpelexport.vcf",sep=''));
        if(any(!file.exists(varFiles))){
                print(paste0("missing varFiles for mouse: ", m))
                next()
        }
        
        ## read in all the variants from varscan, mutect and scalpel
        variantList     <- list();
        variantList.raw	<- list();
        variantList.low <- list()
        varscanPvalList.SNV   <- list();
        varscanPvalList.indel <- list();
        for(j in 1:length(tumour.regions)){
                t <- tumour.regions[j]
                print(t)
                
                ## Varscan Somatic SNVs - fp filtered
                varscan.SNV.file <- varFiles[grepl("VARSCAN", varFiles) & grepl(t, varFiles) & grepl("snp", varFiles)]
                varscan.SNV.dat     <- read.delim(varscan.SNV.file,header=T,sep="\t",stringsAsFactors=F, nrows = -1);
                varscan.SNV.dat$key <- paste(varscan.SNV.dat$X.CHROM,varscan.SNV.dat$POS,varscan.SNV.dat$REF,varscan.SNV.dat$VAR,"TRUE",sep=':');
                varscan.SNV.dat     <- varscan.SNV.dat[varscan.SNV.dat$FILTER %in% "PASS",];
                variantList[["varscan.SNV"]][[t]] <- varscan.SNV.dat$key;
                
                ## Varscan somatic SNV pvalues
                varscan.somatic.file    <- gsub(".fpfilter.output.VAF0.05", "", varscan.SNV.file)
                varscan.somatic.dat     <- read.delim(varscan.somatic.file,header=T,sep="\t",nrow=-1,stringsAsFactors=F);
                varscan.somatic.dat$key <- paste(varscan.somatic.dat$chrom,varscan.somatic.dat$position,varscan.somatic.dat$ref,varscan.somatic.dat$var,sep=':');
                varscanPvalList.SNV[[t]] <- varscan.somatic.dat[,c("key","somatic_p_value")];
                
                ## Varscan Somatic SNVs - fp filtered VAF 2%
                varscan.SNV_low.file    <- gsub("VAF0.05", "VAF0.02", varscan.SNV.file)
                varscan.SNV_low.dat     <- read.delim(varscan.SNV_low.file,header=T,sep="\t",nrow=-1,stringsAsFactors=F);
                varscan.SNV_low.dat$key <- paste(varscan.SNV_low.dat$X.CHROM,varscan.SNV_low.dat$POS,varscan.SNV_low.dat$REF,varscan.SNV_low.dat$VAR,"TRUE",sep=':');
                varscan.SNV_low.dat     <- varscan.SNV_low.dat[varscan.SNV_low.dat$FILTER %in% "PASS",];
                variantList.low[["varscan.SNV_low"]][[t]] <- varscan.SNV_low.dat$key;
                
                ## Varscan Somatic Indels - high confidence
                varscan.indel.file    <- gsub(".snp.Somatic.fpfilter.output.VAF0.05", ".indel.Somatic.hc", varscan.SNV.file);
                varscan.indel.dat     <- read.delim(varscan.indel.file,header=T,sep="\t",nrow=-1,stringsAsFactors=F);
                if (nrow(varscan.indel.dat)>0){
                        varscan.indel.dat$key <- paste(varscan.indel.dat$chrom,varscan.indel.dat$position,varscan.indel.dat$ref,varscan.indel.dat$var,"FALSE",sep=':');
                        variantList[["varscan.indel"]][[t]] <- varscan.indel.dat$key;
			variantList[["varscan.indel"]] <- as.list(variantList[["varscan.indel"]])
                        varscanPvalList.indel[[t]] <- varscan.indel.dat[,c("key","somatic_p_value")];
                } else{
                        variantList[["varscan.indel"]][[t]] <-list(NA)
                        varscanPvalList.indel[[t]] <- list(NA)
                }
                
                ## Varscan Somatic Indels - low confidence
                varscan.indel.raw.file    <- gsub(".snp.Somatic.fpfilter.output.VAF0.05", ".indel.Somatic", varscan.SNV.file);
                varscan.indel.raw.dat     <- read.delim(varscan.indel.raw.file,header=T,sep="\t",nrow=-1,stringsAsFactors=F);
                if (nrow(varscan.indel.raw.dat)>0){
                        varscan.indel.raw.dat$key <- paste(varscan.indel.raw.dat$chrom,varscan.indel.raw.dat$position,varscan.indel.raw.dat$ref,varscan.indel.raw.dat$var,"FALSE",sep=':');
                        variantList.raw[["varscan.indel.raw"]][[t]] <- varscan.indel.raw.dat$key;
                        varscanPvalList.indel[[t]] <- varscan.indel.raw.dat[,c("key","somatic_p_value")];
                } else{
                        variantList.raw[["varscan.indel.raw"]][[t]] <- list(NA)
                }
                
                ## MuTect SNVs
                mutect.SNV.file    <- varFiles[grepl("MUTECT", varFiles) & grepl(t, varFiles)]
                system(paste("grep -v REJECT ",mutect.SNV.file," > ",mutect.SNV.file,".pass",sep='')); # Better done as a system command.
                mutect.SNV.dat     <- read.delim(paste(mutect.SNV.file,".pass",sep=''),header=T,sep="\t",skip=1);
                mutect.SNV.dat$key <- paste(mutect.SNV.dat$contig,":",mutect.SNV.dat$position,":",mutect.SNV.dat$ref_allele,":",mutect.SNV.dat$alt_allele,":TRUE",sep='');
                variantList[["mutect.SNV"]][[t]] <- mutect.SNV.dat$key;
                
                ## SCALPEL INDELS
                scalpel.indel.file    <- varFiles[grepl("SCALPEL", varFiles) & grepl(t, varFiles)]
                system(paste("grep PASS ",scalpel.indel.file," > ",scalpel.indel.file,".pass",sep='')); # Better done as a system command.
                trytest <- try(read.delim(paste(scalpel.indel.file,".pass",sep=''),header=F,sep="\t", nrow=-1, stringsAsFactors = F), silent = T)
                if(!class(trytest)%in%"try-error"){
                        scalpel.indel.dat     <- read.delim(paste(scalpel.indel.file,".pass",sep=''),header=F,sep="\t", nrow=-1, stringsAsFactors = F);
                        colnames(scalpel.indel.dat) <- c('CHROM','POS','ID','REF','ALT','QUAL','FILTER','INFO','FORMAT','GL', t)
                        scalpel.indel.dat$indel <- ifelse(nchar(scalpel.indel.dat$REF)>nchar(scalpel.indel.dat$ALT), "del", "ins")
                        scalpel.indel.dat$newREF <- ifelse(scalpel.indel.dat$indel%in%"del", scalpel.indel.dat$ALT, scalpel.indel.dat$REF)
                        scalpel.indel.dat$newALT <- ifelse(scalpel.indel.dat$indel%in%"del", paste0("-", substr(scalpel.indel.dat$REF,2,nchar(scalpel.indel.dat$REF))), scalpel.indel.dat$ALT)
                        scalpel.indel.dat$newREF <- ifelse(scalpel.indel.dat$indel%in%"ins", scalpel.indel.dat$REF,  scalpel.indel.dat$newREF)
                        scalpel.indel.dat$newALT <- ifelse(scalpel.indel.dat$indel%in%"ins", paste0("+", substr(scalpel.indel.dat$ALT,2,nchar(scalpel.indel.dat$ALT))),  scalpel.indel.dat$newALT)
                        scalpel.indel.dat$key <- paste(scalpel.indel.dat$CHROM,":",scalpel.indel.dat$POS,":",scalpel.indel.dat$newREF,":",scalpel.indel.dat$newALT,":FALSE",sep='');
                        variantList[["scalpel.indel"]][[t]] <- scalpel.indel.dat$key;
                }else{
                        variantList[["scalpel.indel"]][[t]] <- list(NA);
                }
                
        }
        print("out")
        allkeys     <- sort(unique(unlist(variantList)));
        allDat      <- do.call(rbind,strsplit(allkeys,':'));
        allDat      <- data.frame(chr=allDat[,1],start=as.numeric(allDat[,2]),stop=as.numeric(allDat[,2]),ref=allDat[,3],var=allDat[,4],is_SNV=as.logical(allDat[,5]),stringsAsFactors=F);
        allDat$ref <- ifelse(allDat$ref%in%"TRUE", "T", allDat$ref )
        #allDat$key  <- allkeys;
        allDat$key  <- paste(allDat[,1],allDat[,2],allDat[,4],allDat[,5],sep=":")
        rownames(allDat) <- allDat$key;
        allDatFile    <- paste(SNVdir, "/",m,".snp.Somatic.list",sep='');
        write.table(allDat,file=allDatFile,col.names=TRUE,row.names=FALSE,sep="\t",quote=F);
        allDatPosFile <- paste(SNVdir, "/",m,".snp.Somatic.pos.list",sep='');
        posDat <- allDat[!duplicated(allDat[,1:3]),1:3];
        write.table(posDat,file=allDatPosFile,col.names=FALSE,row.names=FALSE,sep="\t",quote=F);
        
        
        
        covDat <- matrix(0,nrow=nrow(allDat),ncol=length(all.regions));
        colnames(covDat) <- all.regions;
        rownames(covDat) <- allDat$key;
        vafDat <- refDat <- varDat <- covDat;
        for (region in all.regions) {
                snv.readCount          <- paste(SNVdir,"/",region,'.SNV.readCount',sep='');
                snv.readCount.complete <- paste(SNVdir,"/",region,'.SNV.readCount.complete',sep='');
                if (!file.exists(snv.readCount) | overwrite) {
                        if (file.exists(snv.readCount.complete)){
                                unlink(snv.readCount.complete)
                        }
                        tumour.bam  <- paste(pathtosamfiles,m, "/", region,"_processed.bam",sep='');
                        bam_readcount.CMD <- paste(
                                bamreadcount.exe,
                                tumour.bam,
                                "-q", mapq,
                                "-b", baseq,
                                "-f", mouserefpath,
                                "-l", allDatPosFile,
                                "-w 1",
                                ">",  snv.readCount,
                                sep=" ");
                        
                        system(paste0("module load bam-readcount/0.7.4-foss-2016b ; ", bam_readcount.CMD))
                        system(paste("touch ",snv.readCount.complete,sep=""))
                }
        }
        
        
        snv.readCount.files <- paste(SNVdir,"/", all.regions,'.SNV.readCount',sep='');
        if (all(file.exists(paste(snv.readCount.files,".complete",sep='')))) {
                for (n in 1:length(snv.readCount.files)) {
                        print(n)
                        countDat <- read.delim(snv.readCount.files[n],header=F,sep="\t",stringsAsFactors=F,check.names=F);
                        countDat[,3] <- toupper(countDat[,3]);
                        countDat <- countDat[countDat[,3] %in% c("A","C","T","G"),];
                        colnames(countDat)[1:4]   <- c("chr","start","ref","cov");
                        colnames(countDat)[-1:-4] <- sub(":.*","",countDat[1,-1:-4]);
                        countDat[,-1:-4] <- apply(countDat[,-1:-4],2,function(x){as.numeric(sub(":.*","",sub(".:","",x)))});
                        countDat$refKey <- paste(countDat$chr,countDat$start,countDat$ref,sep=':');
                        countDat <- countDat[match(paste(allDat$chr,allDat$start,allDat$ref,sep=':'),countDat$refKey),];
                        rownames(countDat) <- rownames(allDat);
                        
                        covDat[,all.regions[n]] <- as.numeric(countDat$cov);
                        for (b in c("A","C","T","G")) {
                                if (any(allDat$ref %in% b)) {
                                        refDat[allDat$ref %in% b,all.regions[n]] <- countDat[allDat$ref %in% b,b];
                                }
                                if (any(allDat$var %in% b)) {
                                        varDat[allDat$var %in% b,all.regions[n]] <- countDat[allDat$var %in% b,b];
                                }
                        }
                }
                vafDat <- round(100 * varDat / apply(covDat,2,function(x){as.numeric(x)}),2);
                colnames(covDat) <- paste(colnames(covDat),".cov",sep='');
                colnames(refDat) <- paste(colnames(refDat),".ref_count",sep='');
                colnames(varDat) <- paste(colnames(varDat),".var_count",sep='');
                colnames(vafDat) <- sub(".var_count$",".VAF",colnames(varDat));
                allDat <- data.frame(allDat,covDat,refDat,varDat,vafDat,stringsAsFactors=F,check.names=F);
        }
        
        
        for (region in all.regions){
                varscanPvalList.indel[[region]]$key<-gsub(":FALSE","",varscanPvalList.indel[[region]]$key)
        }
        pvalMatrix <- matrix(NA,nrow=nrow(allDat),ncol=length(tumour.regions));
        rownames(pvalMatrix) <- allDat$key;
        colnames(pvalMatrix) <- unique(tumour.regions);
        for (t in tumour.regions) {
                varscanPvalList.SNV[[t]] <- varscanPvalList.SNV[[t]][varscanPvalList.SNV[[t]][,"key"] %in% rownames(pvalMatrix),];
                pvalMatrix[varscanPvalList.SNV[[t]][,"key"],t] <- varscanPvalList.SNV[[t]][,"somatic_p_value"];
                varscanPvalList.indel[[t]] <- varscanPvalList.indel[[t]][varscanPvalList.indel[[t]][,"key"] %in% rownames(pvalMatrix),];
                pvalMatrix[varscanPvalList.indel[[t]][,"key"],t] <- varscanPvalList.indel[[t]][,"somatic_p_value"];
        }
        pvalMatrix<-round(pvalMatrix,5)
        colnames(pvalMatrix)<-paste0(colnames(pvalMatrix),".Varscan.pvalue")
        pvalMin <- apply(pvalMatrix,1,function(x){ min(x,na.rm=T); });
        pvalMin[is.infinite(pvalMin)] <- NA;
        
        ############################################################# RB edits 9/8/2019
        ################## Use bam2R to calculate coverage for indels and update allDat
        ###############################################################################
        
        indel.idx <- allDat$is_SNV==FALSE & !is.na(allDat$is_SNV)
        allDat.indel <- allDat[indel.idx,]
        
        insert.idx <- grepl("+",allDat$var,fixed=T)
        del.idx <- grepl("-",allDat$var,fixed=T)
        
        allDat.insert <- allDat[insert.idx,]
        allDat.del <- allDat[del.idx,]
        
        # Function to create cov/var/ref/vaf matrices:
        matrix.make1 <- function(data,regions){
                dat <- matrix(0, nrow = nrow(data), ncol = length(regions))
                colnames(dat) <- regions
                rownames(dat) <- data$key
                return(dat)
        }
        
        # Insertions:
        covDat.insert <- matrix.make1(allDat.insert,all.regions)
        varDat.insert <- matrix.make1(allDat.insert,all.regions)
        refDat.insert <- matrix.make1(allDat.insert,all.regions)
        vafDat.insert <- matrix.make1(allDat.insert,all.regions)
        
        #vafDat <- refDat <- varDat <- covDat;
        for (region in all.regions) {
                print(region)
                tumour.bam  <- paste0(pathtosamfiles, m, "/", region, "_processed.bam")
                for (n in 1:nrow(allDat.insert)) {
                        print(n)
                        count.ins <-bam2R(file = tumour.bam,chr = allDat.insert$chr[n],start = allDat.insert$start[n],stop = allDat.insert$stop[n],q = 20,s = 2)
                        varDat.insert[n,region] <- count.ins[1,'ins'] + count.ins[1,'INS']
                        refDat.insert[n,region]<-count.ins[1,allDat.insert$ref[n]]+count.ins[1,tolower(allDat.insert$ref[n])]
                        vafDat.insert[n,region] <-(varDat.insert[n,region]/(varDat.insert[n,region]+refDat.insert[n,region]))*100
                }
        }
        
        covDat.insert <- varDat.insert + refDat.insert
        
        colnames(covDat.insert) <- paste(all.regions,".cov",sep="");
        colnames(varDat.insert) <- paste(all.regions,".var_count",sep="");
        colnames(refDat.insert) <- paste(all.regions,".ref_count",sep="");
        colnames(vafDat.insert) <- paste(all.regions,".VAF",sep="")
        
        # Deletions:
        covDat.del <- matrix.make1(allDat.del,all.regions)
        varDat.del <- matrix.make1(allDat.del,all.regions)
        refDat.del <- matrix.make1(allDat.del,all.regions)
        vafDat.del <- matrix.make1(allDat.del,all.regions)
        
        for (region in all.regions) {
                tumour.bam  <- paste0(pathtosamfiles, m, "/", region, "_processed.bam")
                for (n in 1:nrow(allDat[del.idx,])) {
                        allDat.del<- allDat[del.idx,]
                        count.ins <-bam2R(file = tumour.bam,chr = allDat.del$chr[n],start = allDat.del$start[n],stop = allDat.del$stop[n],q = 20,s = 2)
                        varDat.del[n,region] <- count.ins[1,'del'] + count.ins[1,'DEL']
                        refDat.del[n,region]<-count.ins[1,allDat.del$ref[n]]+count.ins[1,tolower(allDat.del$ref[n])]
                        vafDat.del[n,region] <-(varDat.del[n,region]/(varDat.del[n,region]+refDat.del[n,region]))*100
                }
        }
        
        covDat.del <- varDat.del + refDat.del
        
        colnames(covDat.del) <- paste(all.regions,".cov",sep="");
        colnames(varDat.del) <- paste(all.regions,".var_count",sep="");
        colnames(refDat.del) <- paste(all.regions,".ref_count",sep="");
        colnames(vafDat.del) <- paste(all.regions,".VAF",sep="");
        
        # Update insertions and deletions in allDat 
        allDat.insert <- data.frame(allDat.insert[,c(1:7)],covDat.insert,
                                    refDat.insert,varDat.insert,vafDat.insert,
                                    stringsAsFactors=F,check.names=F)
        
        if (any(insert.idx)) {
                allDat[insert.idx,match(colnames(allDat.insert),colnames(allDat))] <- allDat.insert;
        }
        
        allDat.del <- data.frame(allDat.del[,c(1:7)],covDat.del,
                                 refDat.del,varDat.del,vafDat.del,
                                 stringsAsFactors=F,check.names=F)
        
        if (any(del.idx)) {
                allDat[del.idx,match(colnames(allDat.del),colnames(allDat))] <- allDat.del;
        }
        
        ## filter blacklisted regions 
        is_blacklist <- NULL
        blacklist <- read.delim(blacklist.path, header = F, stringsAsFactors = F)
        colnames(blacklist) <- c("chr", "start", "stop")
        blacklist[,2:3] <- lapply(blacklist[2:3], as.character)
        blacklist[,2:3] <- lapply(blacklist[2:3], as.numeric)
        allDat$start <- as.numeric(as.character(allDat$start))
        for(n in 1:nrow(allDat)){
                chr <- allDat$chr[n]
                pos <- allDat$start[n]
                if(any(blacklist$chr%in%chr & pos >=blacklist$start & pos<=blacklist$stop)){
                        is_blacklist <- c(is_blacklist, "TRUE")
                }else{
                        is_blacklist <- c(is_blacklist, "FALSE")
                }
        }
        allDat$is_blacklist <- is_blacklist
        
        allDat$max.var_count      <- apply(allDat[,grep("var_count$",colnames(allDat))],1,function(x){max(x,na.rm=T)});
        allDat$max.VAF            <- apply(allDat[,grep("VAF$",colnames(allDat))],1,function(x){max(x,na.rm=T)});
        
        
        
        
        ## Attach FP and MuTect hit information
        mutectHits <- as.data.frame(sapply(variantList[["mutect.SNV"]],function(x){ paste(allDat$key,":",allDat$is_SNV,sep="") %in% x}));
        
        mutectHits$any <- rowSums(mutectHits)>0;
        colnames(mutectHits) <- paste("MuTect.",colnames(mutectHits),sep='');
        allDat <- data.frame(allDat,mutectHits,stringsAsFactors=F);
        allDat$MuTect.any[!allDat$is_SNV] <- NA;
        
        # want to edit to show TRUE/FALSE for both indels and SNVs
        varscanHits <- as.data.frame(sapply(variantList[["varscan.SNV"]],function(x){ paste(allDat$key,":",allDat$is_SNV,sep="") %in% x}));
        
        varscanHits$any <- rowSums(varscanHits)>0;
        colnames(varscanHits) <- paste("Varscan.",colnames(varscanHits),sep='');
        allDat <- data.frame(allDat,varscanHits,stringsAsFactors=F);
        allDat$Varscan.any[!allDat$is_SNV] <- NA;
        
        # add the hits from the lower threshold Varscan output
        varscanLowHits <- as.data.frame(sapply(variantList.low[["varscan.SNV_low"]],function(x){ paste(allDat$key,":",allDat$is_SNV,sep="") %in% x}));
        varscanLowHits$any <- rowSums(varscanLowHits)>0;
        colnames(varscanLowHits) <- paste("Varscan.vaf02.",colnames(varscanLowHits),sep='');
        allDat <- data.frame(allDat,varscanLowHits,stringsAsFactors=F);
        allDat$Varscan.vaf02.any[!allDat$is_SNV] <- NA;
        
        # indels appear more heterogeneous than they actually are due to the hc filter. want to look in the raw calls for matching indels
        
        varscanIRHits <- as.data.frame(sapply(variantList.raw[["varscan.indel.raw"]],function(x){ paste(allDat$key,":",allDat$is_SNV,sep="") %in% x}));
        varscanIRHits$any <- rowSums(varscanIRHits)>0;
        colnames(varscanIRHits) <- paste("VarscanIndel.",colnames(varscanIRHits),sep='');
        allDat <- data.frame(allDat,pvalMatrix,varscanIRHits,Varscan.min.P=pvalMin,stringsAsFactors=F);
        allDat$VarscanIndel.any[allDat$is_SNV] <- NA;
        
        # Scalpel INDELs
        scalpelHits <- as.data.frame(sapply(variantList[["scalpel.indel"]],function(x){ paste(allDat$key,":",allDat$is_SNV,sep="") %in% x}));
        
        scalpelHits$any <- rowSums(scalpelHits)>0;
        colnames(scalpelHits) <- paste("Scalpel.",colnames(scalpelHits),sep='');
        allDat <- data.frame(allDat,scalpelHits,stringsAsFactors=F);
        allDat$Scalpel.any[allDat$is_SNV] <- NA;
        
        ## Get annovar annotation
        insert.idx<-grep("+",allDat$var,fixed=TRUE)
        if(length(insert.idx)>0){
                allDat[insert.idx,]$ref<-"-"
        }
        allDat$var<-gsub("+","",allDat$var,fixed=TRUE)
        # recreate key so matches annovar format for matching
        allDat$key<-paste(allDat$chr,allDat$start,allDat$ref,allDat$var,sep=":")
        
        annovar.in.file  <- tempfile(pattern=paste(m,".annovar.in.",sep=''),  tmpdir=tmp.dir, fileext = "");
        annovar.out.file <- tempfile(pattern=paste(m,".annovar.out.",sep=''), tmpdir=tmp.dir, fileext = "");
        write.table(allDat[,c("chr","start","stop","ref","var")],file=annovar.in.file,col.names=FALSE,row.names=FALSE,sep="\t",quote=F);
        annovar.CMD      <- paste(annovar.path," ",annovar.in.file," ",annovar.params," -out ",annovar.out.file,sep='');
        system(annovar.CMD);
        annovarDat       <- read.delim(paste(annovar.out.file,".mm10_multianno.txt",sep=''),header=TRUE,sep="\t",stringsAsFactors=F);
        annovarDat$key   <- paste(annovarDat$Chr,annovarDat$Start,annovarDat$Ref,annovarDat$Alt,sep=':');
        allDat <- cbind(allDat,annovarDat[match(allDat$key,annovarDat$key),c("Func.refGene","Gene.refGene","ExonicFunc.refGene","AAChange.refGene","snp142",
                                                                             "cytoBand","genomicSuperDups")]);
        
        ### remove brackets when splice site variant
        genesCheck<-allDat$Gene.refGene
        genesCheck<-gsub("\\(.*","",genesCheck,perl=TRUE)
        
        ### remove comma and save the the second gene to additional column
        allDat$Gene.refGene.2<-NA
        genes.l<-strsplit(genesCheck,",")
        allDat$Gene.refGene<-sapply(genes.l, "[", c(1))
        allDat$Gene.refGene.2<-sapply(genes.l, "[", c(2))
        
        
        ##filter SNVs for visulisation
        germVaf <-paste(unique(GL),".VAF",sep="")
        germVaf <- gsub("-", ".", germVaf)
        germVarCount <-gsub(".VAF", ".var_count", germVaf)
        
        
        filter.l <-list()
        filter.l[["Varscan.any"]]=as.logical(filt.use.VarScan)
        filter.l[["max.VAF"]]=as.numeric(filt.max.VAF)
        filter.l[["max.varcount"]]=as.numeric(filt.min.alt.reads)
        filter.l[["min.pvalue"]]=as.numeric(filt.p.val.thresh)
        filter.l[["is.blacklist"]]=as.logical(filt.BlackListed)
        filter.l[["germline.VAF"]]=as.numeric(filt.germline.max.vaf)
        filter.l[["germline.varcount"]]=as.numeric(filt.germline.max.reads)
        filter.l[["is.SNV"]]=as.logical(filt.use.SNV)
        filter.l[["filt.min.depth"]]=as.numeric(filt.min.depth)
        filter.l[["Varscan.vaf.any"]]=as.logical(filt.use.VarScan.low)
        filter.l[["MuTect.any"]]=as.logical(filt.use.Mutect)
        
        
        filter.indel.l <-list()
        filter.indel.l[["indel.VarscanIndel.any"]]=as.logical(filt.indel.use.VarScan)
        filter.indel.l[["indel.max.VAF"]]=as.numeric(filt.indel.max.VAF)
        filter.indel.l[["indel.max.varcount"]]=as.numeric(filt.indel.min.alt.reads)
        filter.indel.l[["indel.min.pvalue"]]=as.numeric(filt.indel.p.val.thresh)
        filter.indel.l[["indel.is.blacklist"]]=as.logical(filt.indel.BlackListed)
        filter.indel.l[["indel.germline.VAF"]]=as.numeric(filt.indel.germline.max.vaf)
        filter.indel.l[["indel.germline.varcount"]]=as.numeric(filt.indel.germline.max.reads)
        filter.indel.l[["indel.is.SNV"]]=as.logical(filt.indel.use.SNV)
        filter.indel.l[["indel.is.dinuc"]]=as.logical(filt.indel.use.dinuc)
        filter.indel.l[["indel.filt.min.depth"]]=as.numeric(filt.indel.min.depth)
        
        colnames(allDat) <- ifelse(grepl("X",substr(colnames(allDat),1,1)), substr(colnames(allDat),2,nchar(colnames(allDat))), colnames(allDat))
        
        plotFilter<- (allDat$Varscan.any == filter.l[["Varscan.any"]] & allDat$max.VAF >= filter.l[["max.VAF"]] | allDat$MuTect.any == filter.l[["MuTect.any"]] & allDat$Varscan.vaf02.any == filter.l[["Varscan.vaf.any"]]) &
                # max VAF     
                allDat$max.var_count>=filter.l[["max.varcount"]] & 
                # max variant count     
                allDat$Varscan.min.P<= filter.l[["min.pvalue"]] &
                # best somatic p-value     
                allDat$is_blacklist==filter.l[["is.blacklist"]] & 
                # blacklisted or driver gene    
                allDat[,germVaf] < filter.l[["germline.VAF"]] &
                # germline VAF
                allDat$is_SNV==filter.l[["is.SNV"]] &
                # is SNV not INDEL, need to do something similar for indels
                allDat[,germVarCount] < filter.l[["germline.varcount"]] &
                apply(allDat[,grep('.cov$',colnames(allDat))],1,min)>=filter.l[["filt.min.depth"]]				
        
        plotFilterIndel<- allDat$VarscanIndel.any == filter.indel.l[["indel.VarscanIndel.any"]] &
                # select varscan calls
                allDat$max.VAF >= filter.indel.l[["indel.max.VAF"]] &
                # max VAF     
                allDat$max.var_count>=filter.indel.l[["indel.max.varcount"]] &
                # max variant count     
                allDat$Varscan.min.P<= filter.indel.l[["indel.min.pvalue"]] &
                # best somatic p-value     
                allDat$is_blacklist==filter.indel.l[["indel.is.blacklist"]] &
                # blacklisted or driver gene    
                allDat[,germVaf] < filter.indel.l[["indel.germline.VAF"]] &
                # germline VAF
                allDat$is_SNV==filter.indel.l[["indel.is.SNV"]] &
                #allDat$is_dinuc==filter.indel.l[["indel.is.dinuc"]] &
                # is not SNV or dinuc and therefore is INDEL. Actually dinuc not discovered yet so just classed as snvs
                allDat[,germVarCount] < filter.indel.l[["indel.germline.varcount"]] &
                apply(allDat[,grep('.cov$',colnames(allDat))],1,min)>=filter.indel.l[["indel.filt.min.depth"]]         
        
        allDat$Use.For.Plots <- plotFilter
        allDat$Use.For.Plots.Indel <- plotFilterIndel;
        
        # sometimes get NA from varSLR - needs to be removed from Use.For.Plots
        allDat$Use.For.Plots[is.na(allDat$Use.For.Plots)] <- FALSE
        allDat$Use.For.Plots.Indel[is.na(allDat$Use.For.Plots.Indel)] <- FALSE
        
        allDat.binaryMatrix <- allDat[grep("VAF$",colnames(allDat))];
        allDat.binaryMatrix <- allDat.binaryMatrix[,!colnames(allDat.binaryMatrix) %in% "max.VAF"];
        allDat.binaryMatrix[allDat.binaryMatrix<1]  <- 0;
        allDat.binaryMatrix[allDat.binaryMatrix>=1] <- 1;
        allDat.binaryMatrix[!allDat$Use.For.Plots,] <- 0;
        colnames(allDat.binaryMatrix) <- sub("VAF$","binary",colnames(allDat.binaryMatrix));
        allDat <- cbind(allDat,allDat.binaryMatrix);
        
        ## Indicate possibility of missing mutation 
        ambiguityDat1 <- matrix(0,nrow=nrow(allDat),ncol=length(all.regions));
        ambiguityDat5 <- matrix(0,nrow=nrow(allDat),ncol=length(all.regions));
        all.regions<-gsub("-",".",all.regions)
        n=1
        for (region in all.regions) {
                refCount<-allDat[,grep(paste0(region,".ref_count"),colnames(allDat))]
                varCount<-allDat[,grep(paste0(region,".var_count"),colnames(allDat))]
                vaf<-allDat[,grep(paste0(region,".VAF"),colnames(allDat))]/100
                totalCount<-refCount+varCount
                for (i in 1:length(refCount)){
                        if (totalCount[i] > 0 & !(is.na(totalCount[i]))){
                                binom<-binom.test(varCount[i],totalCount[i],vaf[i])
                                if(binom$conf.int[2] >= 0.05){
                                        ambiguityDat1[i,n]<-1
                                        ambiguityDat5[i,n]<-1
                                }else if(binom$conf.int[2] >= 0.01){
                                        ambiguityDat1[i,n]<-1
                                        ambiguityDat5[i,n]<-0
                                }else{
                                        ambiguityDat1[i,n]<-0
                                        ambiguityDat5[i,n]<-0
                                }
                        }else{
                                ambiguityDat1[i,n]<-1
                                ambiguityDat5[i,n]<-1
                        }
                        i <- i+1
                }
                n<- n+1
        }
        colnames(ambiguityDat1)<-paste0(all.regions,"_ambiguity_1")
        colnames(ambiguityDat5)<-paste0(all.regions,"_ambiguity_5")
        allDat <- cbind(allDat,ambiguityDat1,ambiguityDat5);
        
        
        ## write out annotated SNV sheet
        
        allDat <- allDat[order(allDat$max.VAF,decreasing=T),];
        ####### flag for indel ##############
        allDat$is_Indel<-FALSE
        allDat[allDat$VarscanIndel.any%in%TRUE,]$is_Indel<-TRUE
        
        
        ####### edit the filtration for the mouse pipeline ###########
        
        
        allDat[grepl("-", allDat$ref)%in%TRUE | grepl("-", allDat$var)%in%TRUE,]$is_Indel<-TRUE
        
        
        filter.l <-list()
        filter.l[["Varscan.any"]]=as.logical(filt.use.VarScan)
        filter.l[["max.VAF"]]=as.numeric(filt.max.VAF)
        filter.l[["max.varcount"]]=as.numeric(filt.min.alt.reads)
        filter.l[["min.pvalue"]]=as.numeric(filt.p.val.thresh)
        filter.l[["is.blacklist"]]=as.logical(filt.BlackListed)
        filter.l[["germline.VAF"]]=as.numeric(filt.germline.max.vaf)
        filter.l[["germline.varcount"]]=as.numeric(filt.germline.max.reads)
        filter.l[["is.SNV"]]=as.logical(filt.use.SNV)
        filter.l[["filt.min.depth"]]=as.numeric(filt.min.depth)
        filter.l[["Varscan.vaf.any"]]=as.logical(filt.use.VarScan.low)
        filter.l[["MuTect.any"]]=as.logical(filt.use.Mutect)
        
        
        filter.indel.l <-list()
        filter.indel.l[["indel.VarscanIndel.any"]]=as.logical(filt.indel.use.VarScan)
        filter.indel.l[["Scalpel.any"]]=as.logical(filt.indel.use.Scalpel)
        filter.indel.l[["indel.max.VAF"]]=as.numeric(filt.indel.max.VAF)
        filter.indel.l[["indel.max.varcount"]]=as.numeric(filt.indel.min.alt.reads)
        filter.indel.l[["indel.min.pvalue"]]=as.numeric(filt.indel.p.val.thresh)
        filter.indel.l[["indel.is.blacklist"]]=as.logical(filt.indel.BlackListed)
        filter.indel.l[["indel.germline.VAF"]]=as.numeric(filt.indel.germline.max.vaf)
        filter.indel.l[["indel.germline.varcount"]]=as.numeric(filt.indel.germline.max.reads)
        filter.indel.l[["indel.is.SNV"]]=as.logical(filt.indel.use.SNV)
        filter.indel.l[["indel.is.dinuc"]]=as.logical(filt.indel.use.dinuc)
        filter.indel.l[["indel.filt.min.depth"]]=as.numeric(filt.indel.min.depth)
        
        plotFilter<- (allDat$Varscan.any == filter.l[["Varscan.any"]] & allDat$max.VAF >= filter.l[["max.VAF"]] | allDat$MuTect.any == filter.l[["MuTect.any"]] & allDat$Varscan.vaf02.any == filter.l[["Varscan.vaf.any"]]) &
                # max VAF     
                allDat$max.var_count>=filter.l[["max.varcount"]] & 
                # max variant count     
                allDat$Varscan.min.P<= filter.l[["min.pvalue"]] &
                # best somatic p-value     
                allDat$is_blacklist==filter.l[["is.blacklist"]] & 
                # blacklisted or driver gene    
                allDat[,germVaf] < filter.l[["germline.VAF"]] &
                # germline VAF
                allDat$is_SNV==filter.l[["is.SNV"]] &
                # is SNV not INDEL, need to do something similar for indels
                allDat[,germVarCount] < filter.l[["germline.varcount"]] &
                apply(allDat[,grep('.cov$',colnames(allDat))],1,min)>=filter.l[["filt.min.depth"]]				
        
        plotFilterIndel<- allDat$VarscanIndel.any == filter.indel.l[["indel.VarscanIndel.any"]] &
                # select varscan calls
                allDat$Scalpel.any == filter.indel.l[["Scalpel.any"]] &
                ## select Scalpel calls
                allDat$max.VAF >= filter.indel.l[["indel.max.VAF"]] &
                # max VAF     
                allDat$max.var_count>=filter.indel.l[["indel.max.varcount"]] &
                # max variant count     
                allDat$Varscan.min.P<= filter.indel.l[["indel.min.pvalue"]] &
                # best somatic p-value     
                allDat$is_blacklist==filter.indel.l[["indel.is.blacklist"]] &
                # blacklisted or driver gene    
                allDat[,germVaf] < filter.indel.l[["indel.germline.VAF"]] &
                # germline VAF
                allDat$is_SNV==filter.indel.l[["indel.is.SNV"]] &
                #allDat$is_dinuc==filter.indel.l[["indel.is.dinuc"]] &
                # is not SNV or dinuc and therefore is INDEL. Actually dinuc not discovered yet so just classed as snvs
                allDat[,germVarCount] < filter.indel.l[["indel.germline.varcount"]] &
                apply(allDat[,grep('.cov$',colnames(allDat))],1,min)>=filter.indel.l[["indel.filt.min.depth"]]         
        
        allDat$Use.For.Plots <- plotFilter
        allDat$Use.For.Plots.Indel <- plotFilterIndel;
        
        allDat.binaryMatrix <- allDat[grep("VAF$",colnames(allDat))];
        allDat.binaryMatrix <- allDat.binaryMatrix[,!colnames(allDat.binaryMatrix) %in% "max.VAF"];
        allDat.binaryMatrix[allDat.binaryMatrix<1]  <- 0;
        allDat.binaryMatrix[allDat.binaryMatrix>=1] <- 1;
        colnames(allDat.binaryMatrix) <- sub("VAF$","binary",colnames(allDat.binaryMatrix));
        allDat[, colnames(allDat.binaryMatrix)] <- allDat.binaryMatrix;
        
        write.table(allDat,file=paste0(SNVdir,"/", m, ".Exome.SNV.xls"),col.names=TRUE,row.names=FALSE,sep="\t",quote=FALSE);
        
        allDat.filt <- allDat[allDat$Use.For.Plots%in%"TRUE" | allDat$Use.For.Plots.Indel%in%"TRUE",]
        allDat.filt <- allDat.filt[, grepl("ambiguity", colnames(allDat.filt))%in%"FALSE"]
        allDat.filt <- allDat.filt[, grepl("Varscan\\.", colnames(allDat.filt))%in%"FALSE" | grepl("any", colnames(allDat.filt)) ]
        allDat.filt <- allDat.filt[, grepl("VarscanIndel\\.", colnames(allDat.filt))%in%"FALSE" | grepl("any", colnames(allDat.filt)) ]
        allDat.filt <- allDat.filt[, grepl("MuTect\\.", colnames(allDat.filt))%in%"FALSE" | grepl("any", colnames(allDat.filt)) ]
        allDat.filt <- allDat.filt[, grepl("Scalpel\\.", colnames(allDat.filt))%in%"FALSE" | grepl("any", colnames(allDat.filt)) ]
        
        write.table(allDat.filt,file=paste0(SNVdir,"/", m, ".Exome.filtered.SNV.xls"),col.names=TRUE,row.names=FALSE,sep="\t",quote=FALSE)
        
#}
